// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
	CookieAuthScopes = "CookieAuth.Scopes"
)

// Defines values for CreateTodoRequestStatus.
const (
	CreateTodoRequestStatusCompleted  CreateTodoRequestStatus = "completed"
	CreateTodoRequestStatusInProgress CreateTodoRequestStatus = "in-progress"
	CreateTodoRequestStatusPending    CreateTodoRequestStatus = "pending"
)

// Defines values for TodoStatus.
const (
	TodoStatusCompleted  TodoStatus = "completed"
	TodoStatusInProgress TodoStatus = "in-progress"
	TodoStatusPending    TodoStatus = "pending"
)

// Defines values for UpdateTodoRequestStatus.
const (
	UpdateTodoRequestStatusCompleted  UpdateTodoRequestStatus = "completed"
	UpdateTodoRequestStatusInProgress UpdateTodoRequestStatus = "in-progress"
	UpdateTodoRequestStatusPending    UpdateTodoRequestStatus = "pending"
)

// Defines values for ListTodosParamsStatus.
const (
	ListTodosParamsStatusCompleted  ListTodosParamsStatus = "completed"
	ListTodosParamsStatusInProgress ListTodosParamsStatus = "in-progress"
	ListTodosParamsStatusPending    ListTodosParamsStatus = "pending"
)

// CreateSubtaskRequest Data required to create a new Subtask.
type CreateSubtaskRequest struct {
	Description string `json:"description"`
}

// CreateTagRequest Data required to create a new Tag.
type CreateTagRequest struct {
	// Color Optional color code (e.g.,
	Color *string `json:"color"`

	// Icon Optional icon identifier.
	Icon *string `json:"icon"`

	// Name Name of the tag. Must be unique for the user.
	Name string `json:"name"`
}

// CreateTodoRequest Data required to create a new Todo item.
type CreateTodoRequest struct {
	Deadline    *time.Time               `json:"deadline"`
	Description *string                  `json:"description"`
	Status      *CreateTodoRequestStatus `json:"status,omitempty"`

	// TagIds Optional list of existing Tag IDs to associate with the new Todo. IDs must belong to the user.
	TagIds *[]openapi_types.UUID `json:"tagIds,omitempty"`
	Title  string                `json:"title"`
}

// CreateTodoRequestStatus defines model for CreateTodoRequest.Status.
type CreateTodoRequestStatus string

// Error Standard error response format.
type Error struct {
	// Code HTTP status code or application-specific code.
	Code int32 `json:"code"`

	// Message Detailed error message.
	Message string `json:"message"`
}

// FileUploadResponse Response after successfully uploading a file.
type FileUploadResponse struct {
	// ContentType MIME type of the uploaded file.
	ContentType string `json:"contentType"`

	// FileId Unique identifier for the uploaded file.
	FileId string `json:"fileId"`

	// FileName Original name of the uploaded file.
	FileName string `json:"fileName"`

	// FileUrl URL to access the uploaded file.
	FileUrl string `json:"fileUrl"`

	// Size Size of the uploaded file in bytes.
	Size int64 `json:"size"`
}

// LoginRequest Data required for logging in via email/password.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password *string             `json:"password,omitempty"`
}

// LoginResponse Response containing the JWT access token for API clients. For browser clients, a cookie is typically set instead.
type LoginResponse struct {
	// AccessToken JWT access token.
	AccessToken string `json:"accessToken"`

	// TokenType Type of the token (always Bearer).
	TokenType string `json:"tokenType"`
}

// SignupRequest Data required for signing up a new user via email/password.
type SignupRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password *string             `json:"password,omitempty"`
	Username string              `json:"username"`
}

// Subtask Represents a subtask associated with a Todo item.
type Subtask struct {
	// Completed Whether the subtask is completed.
	Completed bool       `json:"completed"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Description Description of the subtask.
	Description string              `json:"description"`
	Id          *openapi_types.UUID `json:"id,omitempty"`

	// TodoId The ID of the parent Todo item.
	TodoId    *openapi_types.UUID `json:"todoId,omitempty"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
}

// Tag Represents a user-defined tag for organizing Todos.
type Tag struct {
	// Color Optional color associated with the tag.
	Color     *string    `json:"color"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Icon Optional identifier for an icon associated with the tag (e.g., 'briefcase', 'home'). Frontend maps this to actual icon display.
	Icon *string             `json:"icon"`
	Id   *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the tag (e.g., "Work", "Personal"). Must be unique per user.
	Name      string     `json:"name"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UserId The ID of the user who owns this Tag.
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// Todo Represents a Todo item.
type Todo struct {
	// Attachments List of identifiers (e.g., URLs or IDs) for attached files/images. Managed via upload/update endpoints.
	Attachments []string   `json:"attachments"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`

	// Deadline Optional deadline for the Todo item.
	Deadline *time.Time `json:"deadline"`

	// Description Optional detailed description of the Todo.
	Description *string             `json:"description"`
	Id          *openapi_types.UUID `json:"id,omitempty"`

	// Status Current status of the Todo item.
	Status TodoStatus `json:"status"`

	// Subtasks List of subtasks associated with this Todo. Usually fetched/managed via subtask endpoints.
	Subtasks *[]Subtask `json:"subtasks,omitempty"`

	// TagIds List of IDs of Tags associated with this Todo.
	TagIds []openapi_types.UUID `json:"tagIds"`

	// Title The main title or task of the Todo.
	Title     string     `json:"title"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UserId The ID of the user who owns this Todo.
	UserId *openapi_types.UUID `json:"userId,omitempty"`
}

// TodoStatus Current status of the Todo item.
type TodoStatus string

// UpdateSubtaskRequest Data for updating an existing Subtask. Both fields are optional.
type UpdateSubtaskRequest struct {
	Completed   *bool   `json:"completed,omitempty"`
	Description *string `json:"description,omitempty"`
}

// UpdateTagRequest Data for updating an existing Tag. All fields are optional.
type UpdateTagRequest struct {
	// Color New color code.
	Color *string `json:"color"`

	// Icon New icon identifier.
	Icon *string `json:"icon"`

	// Name New name for the tag. Must be unique for the user.
	Name *string `json:"name,omitempty"`
}

// UpdateTodoRequest Data for updating an existing Todo item. All fields are optional for partial updates.
type UpdateTodoRequest struct {
	// Attachments Replace the existing list of attachment identifiers. Use upload/delete endpoints for managing actual files.
	Attachments *[]string                `json:"attachments,omitempty"`
	Deadline    *time.Time               `json:"deadline"`
	Description *string                  `json:"description"`
	Status      *UpdateTodoRequestStatus `json:"status,omitempty"`

	// TagIds Replace the existing list of associated Tag IDs. IDs must belong to the user.
	TagIds *[]openapi_types.UUID `json:"tagIds,omitempty"`
	Title  *string               `json:"title,omitempty"`
}

// UpdateTodoRequestStatus defines model for UpdateTodoRequest.Status.
type UpdateTodoRequestStatus string

// UpdateUserRequest Data for updating user details.
type UpdateUserRequest struct {
	Username *string `json:"username,omitempty"`
}

// User Represents a registered user.
type User struct {
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	Email     openapi_types.Email `json:"email"`

	// EmailVerified Indicates if the user's email has been verified (e.g., via OAuth or email confirmation).
	EmailVerified *bool               `json:"emailVerified,omitempty"`
	Id            *openapi_types.UUID `json:"id,omitempty"`
	UpdatedAt     *time.Time          `json:"updatedAt,omitempty"`
	Username      string              `json:"username"`
}

// BadRequest Standard error response format.
type BadRequest = Error

// Conflict Standard error response format.
type Conflict = Error

// Forbidden Standard error response format.
type Forbidden = Error

// InternalServerError Standard error response format.
type InternalServerError = Error

// NotFound Standard error response format.
type NotFound = Error

// Unauthorized Standard error response format.
type Unauthorized = Error

// ListTodosParams defines parameters for ListTodos.
type ListTodosParams struct {
	// Status Filter Todos by status.
	Status *ListTodosParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// TagId Filter Todos by a specific Tag ID.
	TagId *openapi_types.UUID `form:"tagId,omitempty" json:"tagId,omitempty"`

	// DeadlineBefore Filter Todos with deadline before this date/time.
	DeadlineBefore *time.Time `form:"deadline_before,omitempty" json:"deadline_before,omitempty"`

	// DeadlineAfter Filter Todos with deadline after this date/time.
	DeadlineAfter *time.Time `form:"deadline_after,omitempty" json:"deadline_after,omitempty"`

	// Limit Maximum number of Todos to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of Todos to skip for pagination.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListTodosParamsStatus defines parameters for ListTodos.
type ListTodosParamsStatus string

// UploadTodoAttachmentMultipartBody defines parameters for UploadTodoAttachment.
type UploadTodoAttachmentMultipartBody struct {
	File openapi_types.File `json:"file"`
}

// LoginUserApiJSONRequestBody defines body for LoginUserApi for application/json ContentType.
type LoginUserApiJSONRequestBody = LoginRequest

// SignupUserApiJSONRequestBody defines body for SignupUserApi for application/json ContentType.
type SignupUserApiJSONRequestBody = SignupRequest

// CreateTagJSONRequestBody defines body for CreateTag for application/json ContentType.
type CreateTagJSONRequestBody = CreateTagRequest

// UpdateTagByIdJSONRequestBody defines body for UpdateTagById for application/json ContentType.
type UpdateTagByIdJSONRequestBody = UpdateTagRequest

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody = CreateTodoRequest

// UpdateTodoByIdJSONRequestBody defines body for UpdateTodoById for application/json ContentType.
type UpdateTodoByIdJSONRequestBody = UpdateTodoRequest

// UploadTodoAttachmentMultipartRequestBody defines body for UploadTodoAttachment for multipart/form-data ContentType.
type UploadTodoAttachmentMultipartRequestBody UploadTodoAttachmentMultipartBody

// CreateSubtaskForTodoJSONRequestBody defines body for CreateSubtaskForTodo for application/json ContentType.
type CreateSubtaskForTodoJSONRequestBody = CreateSubtaskRequest

// UpdateSubtaskByIdJSONRequestBody defines body for UpdateSubtaskById for application/json ContentType.
type UpdateSubtaskByIdJSONRequestBody = UpdateSubtaskRequest

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody = UpdateUserRequest
